FROM ubuntu:20.04 as build_wasm

ENV TZ=America/US
ENV DEBIAN_FRONTEND=noninteractive

RUN apt update && \
    apt upgrade -y && \
    apt install -y \
        build-essential \
        ninja-build \
        python3-pip \
        python3-venv \
        python3-dev curl gnupg apt-transport-https && \
    curl -fsSL https://bazel.build/bazel-release.pub.gpg | apt-key add && \
        echo 'deb https://storage.googleapis.com/bazel-apt stable jdk1.8' | tee /etc/apt/sources.list.d/bazel.list && \
        apt update && \
        apt install -y bazel bazel-4.1.0 git && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

RUN    pip3 install --no-cache-dir conan==1.52.0 cmake && \
    conan user && \
    conan profile new default --detect --force && \
    conan profile update settings.compiler.libcxx=libstdc++11 default && \
    conan config set general.parallel_download=$(nproc) && \
    conan config set general.cpu_count=$(nproc) && \
    conan remote add duckstax http://conan.duckstax.com:9300

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

WORKDIR /app/wasm_build
COPY conan/profiles/wasm ./conan/profiles/wasm
RUN conan config install conan
COPY conanfile-wasm.txt ./
#RUN conan install -pr wasm --profile:build=default --profile:host=wasm -g=virtualenv --build missing -s build_type=Release conanfile-wasm.txt

WORKDIR /app
COPY ./integration ./integration
COPY ./cmake ./cmake
COPY ./components ./components
COPY ./core ./core
COPY ./services ./services
COPY ./wasm ./wasm
COPY ./CMakeLists.txt ./CMakeLists.txt

WORKDIR /app/wasm_build
#RUN source ./activate.sh  && \
#    cmake  ..  -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$EMSCRIPTEN/cmake/Modules/Platform/Emscripten.cmake -DDEV_MODE=OFF -DWASM_BUILD=ON &&\
#    cmake --build .

FROM quay.io/pypa/manylinux2014_x86_64 as build_wheel

RUN yum install -y ninja-build python3-pip wget unzip zip gcc-c++ java-11-openjdk-devel
RUN wget https://releases.bazel.build/4.1.0/release/bazel-4.1.0-dist.zip
RUN unzip bazel-4.1.0-dist.zip -d bazel
RUN ls -l /usr/lib/jvm/
RUN        PYTHON_PATH=/opt/python/cp39-cp39 &&\
        JAVA_HOME="/usr/lib/jvm/java-11-openjdk-11.0.15.0.9-2.el7_9.x86_64" &&\

        PATH=$PYTHON_PATH:$PATH:$JAVA_HOME/bin &&\
        ln -sf /usr/local/bin/python3.9 /usr/bin/python &&\

        cd bazel &&\
        pwd && \
        ls &&\
        ./compile.sh  && \
        pwd && \
        ls output && \
        cp  ./output/bazel /usr/bin && \
        bazel --version

RUN  pip3 install --no-cache-dir conan==1.52.0 pytest==6.2.5
RUN  conan user
RUN  conan profile new default --detect --force
RUN  conan profile update settings.compiler.libcxx=libstdc++11 default
RUN  conan config set general.parallel_download=$(nproc)
RUN  conan config set general.cpu_count=$(nproc)
RUN  conan remote add duckstax http://conan.duckstax.com:9300

RUN /opt/python/cp38-cp38/bin/python -m pip install --no-cache-dir  wheel setuptools scikit-build

WORKDIR /app

COPY ./conanfile.txt ./conanfile.txt
RUN conan install . --build missing  \
    --build fmt \
    --build spdlog  \
    --build rocksdb  \
    -s build_type=Release -if=/app/_skbuild/linux-x86_64-3.8/cmake-build
#RUN pwd
#RUN ls
#RUN ls _skbuild/linux-x86_64-3.6/cmake-build/build_tools

COPY ./integration ./integration
COPY ./cmake ./cmake
COPY ./components ./components
COPY ./core ./core
COPY ./services ./services
COPY ./wasm ./wasm
COPY ./CMakeLists.txt ./CMakeLists.txt

#RUN /opt/python/cp38-cp38/bin/python -m pip install wheel setuptools scikit-build

#WORKDIR /app/build/integration/python/wheelhouse_dirty
#RUN mkdir ottergon
#RUN touch ottergon/__init__.py
#RUN touch README.md
#RUN cp /app/build/integration/python/ottergon.cpython-36m-x86_64-linux-gnu.so ./ottergon
#RUN ls
#RUN ls ottergon

#WORKDIR /app/build/integration/python/
#RUN pip3 install wheel setuptools scikit-build
#RUN cp /app/integration/python/setup.py .
#RUN python3 -m pip wheel --verbose . -w wheelhouse_dirty
#RUN auditwheel repair wheelhouse_dirty/ottergon*.whl --plat manylinux2014_x86_64 -w wheelhouse

#COPY ./python ./python
#RUN cp ./python/pyproject.toml ./pyproject.toml
#RUN cp ./python/setup.py ./setup.py

#RUN ls /opt/python/cp36-cp36m/include/python3.6m
#RUN python3 setup.py  --verbose bdist_wheel  -DPython3_INCLUDE_DIRS=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") -DPython3_LIBRARIES=$(python3 -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
    #$(python3-config --includes) $(python3 -m pybind11 --includes)
#RUN python3 -m cibuildwheel   --platform linux --output-dir wheelhouse
#RUN cp integration/python/ottergon/setup.py .
#RUN cp integration/python/ottergon/MANIFEST.in .

#RUN ls /opt/python/cp38-cp38/bin/


RUN cp integration/python/ottergon/setup.py .
RUN cp integration/python/ottergon/MANIFEST.in .
RUN cp integration/python/ottergon/pyproject.toml .
RUN /opt/python/cp38-cp38/bin/python3 setup.py bdist_wheel  --verbose  \
  #   -DPython3_INCLUDE_DIRS=/opt/python/cp38-cp38m/include/python3.8m \
  #   -DPython3_LIBRARIES=$(python3 -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))") \
    -DDEV_MODE=ON

#RUN /opt/python/cp38-cp38/bin/python3 integration/python/ottergon/setup.py test
#RUN ls -R  /app/_skbuild/linux-x86_64-3.6/cmake-build/
#RUN ls -R  /app/_skbuild/linux-x86_64-3.6/cmake-build/integration/python
#RUN wheel unpack dist/ottergon-1.0.0-cp36-cp36m-linux_x86_64.whl
#RUN ls -R ottergon-1.0.0
#RUN ls dist
#WORKDIR /app/_skbuild/linux-x86_64-3.8/cmake-build

#COPY --from=build_wasm /app/wasm_build/bin/*.wasm ./components/wasm_runner/tests/

#RUN ctest -C --output-on-failure

WORKDIR ./integration/python
#RUN pytest

WORKDIR /app
RUN  auditwheel repair dist/ottergon-1.0.0-cp38-cp38-linux_x86_64.whl  -w  ./work/dist/
#RUN ls -R
#RUN pwd
#RUN ls


FROM ubuntu:20.04

RUN apt update && \
    apt upgrade -y && \
    apt install -y \
        python3-pip \
        python3-venv

WORKDIR /app

COPY --from=build_wheel /app/work/dist/ottergon-1.0.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl /app/ottergon-1.0.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl

RUN python3 --version
RUN pip3 install ./ottergon-1.0.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
RUN python3 -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))"
RUN python3 -c "from ottergon import Client, DataBase, Collection"

