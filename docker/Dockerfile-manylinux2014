FROM ubuntu:20.04 as build_wasm

ENV TZ=America/US
ENV DEBIAN_FRONTEND=noninteractive

RUN apt update && \
    apt upgrade -y && \
    apt install -y \
        build-essential \
        ninja-build \
        python3-pip \
        python3-venv \
        python3-dev curl gnupg apt-transport-https && \
    curl -fsSL https://bazel.build/bazel-release.pub.gpg | apt-key add && \
        echo 'deb https://storage.googleapis.com/bazel-apt stable jdk1.8' | tee /etc/apt/sources.list.d/bazel.list && \
        apt update && \
        apt install -y bazel bazel-4.1.0 git && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

RUN    pip3 install --no-cache-dir conan==1.52.0 cmake && \
    conan user && \
    conan profile new default --detect --force && \
    conan profile update settings.compiler.libcxx=libstdc++11 default && \
    conan config set general.parallel_download=$(nproc) && \
    conan config set general.cpu_count=$(nproc) && \
    conan remote add duckstax http://conan.duckstax.com:9300

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

WORKDIR /app/wasm_build
COPY conan/profiles/wasm ./conan/profiles/wasm
RUN conan config install conan
COPY conanfile-wasm.txt ./
#RUN conan install -pr wasm --profile:build=default --profile:host=wasm -g=virtualenv --build missing -s build_type=Release conanfile-wasm.txt

WORKDIR /app
COPY ./integration ./integration
COPY ./cmake ./cmake
COPY ./components ./components
COPY ./core ./core
COPY ./services ./services
COPY ./wasm ./wasm
COPY ./CMakeLists.txt ./CMakeLists.txt

WORKDIR /app/wasm_build
#RUN source ./activate.sh  && \
#    cmake  ..  -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$EMSCRIPTEN/cmake/Modules/Platform/Emscripten.cmake -DDEV_MODE=OFF -DWASM_BUILD=ON &&\
#    cmake --build .

FROM quay.io/pypa/manylinux2014_x86_64 as build_wheel

RUN yum install -y ninja-build python3-pip wget unzip zip gcc-c++ java-11-openjdk-devel
RUN wget https://releases.bazel.build/4.1.0/release/bazel-4.1.0-dist.zip
RUN unzip bazel-4.1.0-dist.zip -d bazel
RUN ls -l /usr/lib/jvm/
RUN        PYTHON_PATH=/opt/python/cp39-cp39 &&\
        JAVA_HOME="/usr/lib/jvm/java-11-openjdk-11.0.15.0.9-2.el7_9.x86_64" &&\

        PATH=$PYTHON_PATH:$PATH:$JAVA_HOME/bin &&\
        ln -sf /usr/local/bin/python3.9 /usr/bin/python &&\

        cd bazel &&\
        pwd && \
        ls &&\
        ./compile.sh  && \
        pwd && \
        ls output && \
        cp  ./output/bazel /usr/bin && \
        bazel --version

RUN  pip3 install --no-cache-dir conan==1.52.0 pytest==6.2.5
RUN  conan user
RUN  conan profile new default --detect --force
RUN  conan profile update settings.compiler.libcxx=libstdc++11 default
RUN  conan config set general.parallel_download=$(nproc)
RUN  conan config set general.cpu_count=$(nproc)
RUN  conan remote add duckstax http://conan.duckstax.com:9300

WORKDIR /app

COPY ./conanfile.txt ./conanfile.txt
RUN conan install . --build missing  \
    --build fmt \
    --build spdlog  \
    --build rocksdb  \
    -s build_type=Release

COPY ./integration ./integration
COPY ./cmake ./cmake
COPY ./components ./components
COPY ./core ./core
COPY ./services ./services
COPY ./wasm ./wasm
COPY ./CMakeLists.txt ./CMakeLists.txt

RUN cp integration/python/ottergon/setup.py .
RUN cp integration/python/ottergon/MANIFEST.in .
RUN cp integration/python/ottergon/pyproject.toml .

RUN   PYBIN=(/opt/python/*/bin) && \
      for BIN in "${PYBIN[@]}";  do  \
      if [[  ${BIN} == *"cp38"* ]]; then \
          ${BIN}/python3 -m pip install --no-cache-dir  wheel setuptools scikit-build && \
          ${BIN}/python3 setup.py bdist_wheel  --verbose  -DDEV_MODE=ON ; \
      fi \
      done
#WORKDIR /app/_skbuild/linux-x86_64-3.8/cmake-build

#COPY --from=build_wasm /app/wasm_build/bin/*.wasm ./components/wasm_runner/tests/

#RUN ctest -C --output-on-failure

#WORKDIR ./integration/python
#RUN pytest

WORKDIR /app
RUN for whl in dist/ottergon*.whl; do \
        auditwheel repair ${whl} -w ./work/dist/  &&\
        rm ${whl}; \
    done



FROM ubuntu:20.04

RUN apt update && \
    apt upgrade -y && \
    apt install -y \
        python3-pip \
        python3-venv

WORKDIR /app

COPY --from=build_wheel /app/work/dist/ottergon-1.0.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl /app/ottergon-1.0.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl

RUN python3 --version
RUN pip3 install ./ottergon-1.0.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
RUN python3 -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))"
RUN python3 -c "from ottergon import Client, DataBase, Collection"