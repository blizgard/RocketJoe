FROM ubuntu:20.04 as build_wasm

ENV TZ=America/US
ENV DEBIAN_FRONTEND=noninteractive

RUN apt update && \
    apt upgrade -y && \
    apt install -y \
        build-essential \
        ninja-build \
        python3-pip \
        python3-venv \
        python3-dev curl gnupg apt-transport-https && \
    curl -fsSL https://bazel.build/bazel-release.pub.gpg | apt-key add && \
        echo 'deb https://storage.googleapis.com/bazel-apt stable jdk1.8' | tee /etc/apt/sources.list.d/bazel.list && \
        apt update && \
        apt install -y bazel bazel-4.1.0 git && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

RUN    pip3 install --no-cache-dir conan==1.52.0 cmake && \
    conan user && \
    conan profile new default --detect --force && \
    conan profile update settings.compiler.libcxx=libstdc++11 default && \
    conan config set general.parallel_download=$(nproc) && \
    conan config set general.cpu_count=$(nproc) && \
    conan remote add duckstax http://conan.duckstax.com:9300

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

WORKDIR /app/wasm_build
COPY conan/profiles/wasm ./conan/profiles/wasm
RUN conan config install conan
COPY conanfile-wasm.txt ./
RUN conan install -pr wasm --profile:build=default --profile:host=wasm -g=virtualenv --build missing -s build_type=Release conanfile-wasm.txt -if=./wasm  -of=./wasm

WORKDIR /app
COPY ./integration ./integration
COPY ./cmake ./cmake
COPY ./components ./components
COPY ./core ./core
COPY ./services ./services
COPY ./wasm ./wasm
COPY ./CMakeLists.txt ./CMakeLists.txt

WORKDIR /app/wasm_build
RUN source ./wasm/activate.sh  && \
    cmake  ..  -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$EMSCRIPTEN/cmake/Modules/Platform/Emscripten.cmake -DDEV_MODE=OFF -DWASM_BUILD=ON &&\
    cmake --build .

FROM quay.io/pypa/manylinux2014_x86_64 as build

RUN yum install -y ninja-build python3-pip wget unzip zip gcc-c++ java-11-openjdk-devel
RUN wget https://releases.bazel.build/4.1.0/release/bazel-4.1.0-dist.zip
RUN unzip bazel-4.1.0-dist.zip -d bazel
RUN ls -l /usr/lib/jvm/
RUN        PYTHON_PATH=/opt/python/cp39-cp39 &&\
        JAVA_HOME="/usr/lib/jvm/java-11-openjdk-11.0.15.0.9-2.el7_9.x86_64" &&\

        PATH=$PYTHON_PATH:$PATH:$JAVA_HOME/bin &&\
        ln -sf /usr/local/bin/python3.9 /usr/bin/python &&\

        cd bazel &&\
        pwd && \
        ls &&\
        ./compile.sh  && \
        pwd && \
        ls output && \
        cp  ./output/bazel /usr/bin && \
        bazel --version


RUN  pip3 install --no-cache-dir conan==1.52.0 pytest==6.2.5
RUN  conan user
RUN  conan profile new default --detect --force
RUN  conan profile update settings.compiler.libcxx=libstdc++11 default
RUN  conan config set general.parallel_download=$(nproc)
RUN  conan config set general.cpu_count=$(nproc)
RUN  conan remote add duckstax http://conan.duckstax.com:9300

WORKDIR /app/build
COPY ./conanfile.txt ./conanfile.txt

RUN conan install . --build missing --build rocksdb -s build_type=Release
RUN conan install . --build missing --build spdlog  -s build_type=Release
RUN conan install . --build missing --build fmt  -s build_type=Release

WORKDIR /app
COPY ./integration ./integration
COPY ./cmake ./cmake
COPY ./components ./components
COPY ./core ./core
COPY ./services ./services
COPY ./wasm ./wasm
COPY ./CMakeLists.txt ./CMakeLists.txt

WORKDIR /app/build

RUN cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DDEV_MODE=ON  && \
    cmake --build .


COPY --from=build_wasm /app/wasm_build/bin/*.wasm /app/build/components/wasm_runner/tests/

#RUN ctest -C --output-on-failure

WORKDIR /app/build/integration/python
RUN pytest


#WORKDIR /app/build/integration/python/wheelhouse_dirty
#RUN mkdir ottergon
#RUN touch ottergon/__init__.py
#RUN touch README.md
#RUN cp /app/build/integration/python/ottergon.cpython-36m-x86_64-linux-gnu.so ./ottergon
#RUN ls
#RUN ls ottergon

#WORKDIR /app/build/integration/python/
#RUN pip3 install wheel setuptools scikit-build
#RUN cp /app/integration/python/setup.py .
#RUN python3 -m pip wheel --verbose . -w wheelhouse_dirty
#RUN auditwheel repair wheelhouse_dirty/ottergon*.whl --plat manylinux2014_x86_64 -w wheelhouse

WORKDIR /app/
COPY ./python ./python
RUN cp ./python/pyproject.toml ./pyproject.toml
RUN cp ./python/setup.py ./setup.py

RUN pip3 install wheel setuptools scikit-build cibuildwheel pipx
RUN ls
COPY ./conanfile.txt ./conanfile.txt
RUN conan install . --build missing -if=/app/_skbuild/linux-x86_64-3.6/cmake-build
#RUN pipx run build --sdist
#RUN file /usr/include/python3.6m/pyconfig-64.h
#RUN cat /usr/include/python3.6m/pyconfig-64.h
#RUN ls /app/_skbuild/linux-x86_64-3.6/cmake-build

#RUN cat  /usr/include/python3.6m/pyconfig-64.h
#RUN ls /opt/python/cp36-cp36m/include/python3.6m

RUN python3 setup.py  --verbose bdist_wheel

#RUN python3 -m cibuildwheel   --platform linux --output-dir wheelhouse

