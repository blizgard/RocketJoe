name: manylinux2014_upload

on: [pull_request]

#on:
#  push:
#    branches:
#      - master
        
env:
  BUILD_TYPE: Release
  DEV_MODE: ON   
  
jobs:
  prepare:
    name: Make environment variables available to the rest of the workflow
    runs-on: ubuntu-latest
    outputs:
        params: ${{ steps.env-vars.outputs.params }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt install -y  build-essential ninja-build python3-pip python3-dev curl gnupg apt-transport-https && \
          curl -fsSL https://bazel.build/bazel-release.pub.gpg | sudo apt-key add && \
          echo 'deb https://storage.googleapis.com/bazel-apt stable jdk1.8' | sudo tee /etc/apt/sources.list.d/bazel.list && \
          sudo apt update && 
          sudo apt install -y bazel bazel-4.1.0 git 

      - name: conan installation and configuration
        run: |
          pip install conan==1.53.0
          conan user
          conan profile new default --detect --force
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan config set general.parallel_download=$(nproc)
          conan config set general.cpu_count=$(nproc)
          conan remote add duckstax http://conan.duckstax.com:9300

      - name: download dependencies
        run: | 
          mkdir build && cd build
          cp -r ../conan .
          cp ../conanfile-wasm.txt .
          conan config install conan
          conan install -pr wasm --profile:build=default --profile:host=wasm -g virtualenv --build missing -s build_type=Release conanfile-wasm.txt

      - name: build wasm target
        run: |
          cd build
          source ./activate.sh  && \
          cmake  -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$EMSCRIPTEN/cmake/Modules/Platform/Emscripten.cmake -DDEV_MODE=OFF -DWASM_BUILD=ON .. &&\
          cmake --build . && \
          source ./deactivate.sh

      - run: |
          pwd
          ls
      - name: Save library
        uses: actions/upload-artifact@v3
        with:
          path: build/bin/*.wasm
          name: wasm-file

      - name: install jq
        run: pip install jq
      - id: env-vars
        name: Output environment variables
        run: echo "::set-output name=params::$(echo $(jq -n 'env'))"

  build-wheel:
    runs-on: ubuntu-latest
    needs: [ prepare ]
    strategy:
      fail-fast: false
      matrix:
        PYTHON_VERSION: [ "3.6"] #,"3.7","3.8","3.9", "3.10", "3.11" ]

    container: k0tb9g9m0t/manylinux-bazel-2014

    steps:
      - uses: actions/checkout@v3

      - name: Set env
        run: |
          export PYTHON_SHORT_VERSION=$(echo '${{ matrix.PYTHON_VERSION }}' | tr -d '.')
          echo "PYTHON_SHORT_VERSION=${PYTHON_SHORT_VERSION}" >> $GITHUB_ENV 
          export PYTHON_PATH=/opt/python/cp${PYTHON_SHORT_VERSION}-cp$(if [[ $PYTHON_SHORT_VERSION =~ ^3[67]$ ]]; then echo $PYTHON_SHORT_VERSION'm';else echo $PYTHON_SHORT_VERSION; fi )
          export PATH=$PYTHON_PATH:$PYTHON_PATH/bin:$PATH
          echo "PYTHON_PATH=${PYTHON_PATH}" >> $GITHUB_ENV 
          echo "PATH=${PATH}" >> $GITHUB_ENV 

      - name: Install system packages
        run: |
          yum install -y ninja-build python3-pip python3-devel wget unzip zip gcc-c++ java-11-openjdk-devel

      - name: Set env conan dependencies
        run: |
          pip3 install --no-cache-dir conan==1.53.0
          conan user
          conan profile new default --detect --force
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan config set general.parallel_download=$(nproc)
          conan config set general.cpu_count=$(nproc)
          conan config install conan
          conan remote add duckstax http://conan.duckstax.com:9300

      - name: Download and Install conan dependencies
        run: |
          pwd
          ls
          conan install . --build missing  \
          --build fmt \
          --build spdlog  \
          --build rocksdb  \
          -s build_type=Release

      #- run: mkdir -p ./wasm_bin/
      - uses: actions/download-artifact@v3
        with:
          name: wasm-file
          path: wasm_bin

      - name: Build wheel
        run: |
          pwd
          ls
          
          cp integration/python/ottergon/setup.py .
          cp integration/python/ottergon/MANIFEST.in .
          cp integration/python/ottergon/pyproject.toml .
          cp integration/python/ottergon/get_path.py .
          
          python3 -m pip install --no-cache-dir  wheel setuptools scikit-build pytest==6.2.5
          mkdir -p $(echo "./$(python3 get_path.py )")
          conan install . --build missing -s build_type=Release -if=$(echo "./$(python3 get_path.py )")
          python3 setup.py bdist_wheel  --verbose 
          cp ./wasm_bin/*.wasm $(echo "./$(python3 get_path.py )/components/wasm_runner/tests/") 

      - name: repair wheel
        run: |
          for whl in dist/ottergon*.whl; do
            auditwheel repair ${whl} -w ./work/dist/ 
            rm ${whl};
          done

      - name: Save library
        uses: actions/upload-artifact@v3
        with:
          path: ./work/dist/
          name: ottergon-wheel-${{ matrix.PYTHON_VERSION }}

  test-and-upload-wheel:
    runs-on: ${{ matrix.operating-system }}
    needs: [ build-wheel ]
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-20.04 ]
        python-version: [ "3.6"] #,"3.7","3.8","3.9", "3.10", "3.11" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: install packege
        run: |
          sudo apt update 
          sudo apt upgrade -y 
          sudo apt install -y  python3-pip python3-venv
          pip3 install --no-cache-dir pytest==6.2.5 twine

      - uses: actions/download-artifact@v3
        with:
          name: ottergon-wheel-${{ matrix.python-version }}
          path: ./app

      - name: install wheel and test
        run: |
          python3 --version
          pip3 install ./app/ottergon-*.whl
          python3 -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))"
          python3 -c "from ottergon import Client, DataBase, Collection"
          pytest

      - name: Publish wheels
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: | 
          pwd
          ls
          twine upload --skip-existing *
        working-directory: ./app

  install-and-test-package:
    runs-on: ${{ matrix.operating-system }}
    needs: [test-and-upload-wheel]
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-20.04 ]
        python-version: [ "3.6"] #,"3.7","3.8","3.9", "3.10", "3.11" ]

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: install packege
        run: |
          sudo apt update 
          sudo apt upgrade -y 
          sudo apt install -y  python3-pip

      - name: Download package
        run: |
          python3 --version
          pip install ottergon
          python3 -c "from ottergon import Client, DataBase, Collection"
